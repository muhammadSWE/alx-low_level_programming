!<arch>
0-isupper.c/    0           0     0     644     231       `
#include "main.h"
/**
 * _isupper - check if char is uppercase
 *@c: the character to be tested
 * Return: 1 if upper, otherwise 0.
 */
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

0-memset.c/     0           0     0     644     276       `
#include "main.h"
/**
 * *_memset - fill memory with constant bytes
 *@s: pointer 1
 *@b: constant byte
 *@n: unsigned int
 *
 *Return: pointer to s
 */
char *_memset(char *s, char b, unsigned int n)
{
	int i;

	for (i = 0; n > 0; i++)
	{
		s[i] = b;
		n--;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     375       `
#include "main.h"
/**
 * *_strcat - concatenates two strings
 *@dest: destination string parameter
 *@src: source string parameter
 *
 *Return: concatenated string dest
 */
char *_strcat(char *dest, char *src)
{
	int i = 0;
	int j;

	while (dest[i] != '\0')
	{
		i++;
	}
	for (j = 0; src[j] != '\0'; j++)
	{
		dest[i] = src[j];
		i++;
	}

	dest[i] = '\0';

	return (dest);
}

1-isdigit.c/    0           0     0     644     225       `
#include "main.h"
/**
 * _isdigit - check if c is a digit
 *@c: the character to be tested
 * Return: 1 if digit, otherwise 0.
 */
int _isdigit(int c)
{
	if (c >= 48 && c < 58)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

1-memcpy.c/     0           0     0     644     281       `
#include "main.h"
/**
 * *_memcpy - copy memory area
 *@dest: destination
 *@src: source
 *@n: unsigned int
 *
 *Return: pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	int i;

	for (i = 0; n > 0; i++)
	{
		dest[i] = src[i];
		n--;
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     412       `
#include "main.h"
/**
 * *_strncat - concatenates two strings
 *@dest: destination string parameter
 *@src: source string parameter
 *@n: bytes number
 *
 *Return: concatenated string dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int i = 0;
	int j;

	while (dest[i] != '\0')
	{
		i++;
	}
	for (j = 0; src[j] != '\0' && j < n; j++)
	{
		dest[i] = src[j];
		i++;
	}

	dest[i] = '\0';

	return (dest);
}
100-atoi.c/     0           0     0     644     455       `
#include "main.h"
/**
  * _atoi - returns integers in a string
  * @s: string
  *
  * Return: integer
  */
int _atoi(char *s)
{
	unsigned int output = 0;

	int negativecount = 0;

	while (*s && (*s < '0' || *s > '9'))
	{
		if (*s == '-')
		{
			negativecount++;
		}
		++s;
	}

	while (*s && (*s >= '0' && *s <= '9'))
	{
		output = output * 10 + (*s - '0');
		++s;
	}

	if (negativecount % 2 == 0)
	{
	return (output);
	}
	else
	{
		return (-output);
	}
}

2-strchr.c/     0           0     0     644     286       `
#include "main.h"
/**
 * *_strchr - locates a character in a string
 *@s: string
 *@c: character
 *
 *Return: pointer to first occurrence of c
 */
char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
		{
			return (&s[i]);
		}
	}
	return (0);
}
2-strlen.c/     0           0     0     644     222       `
#include "main.h"
/**
  *_strlen - gets string length
  *@s: string parameter
  *
  *Return: string length
  */
int _strlen(char *s)
{
	int i;
	int len = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		len++;
	}
	return (len);
}
2-strncpy.c/    0           0     0     644     356       `
#include "main.h"
/**
 * *_strncpy  - copies a string
 *@dest: string parameter
 *@src: string parameter
 *@n: bytes used from source
 *
 *Return: new string dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}
3-islower.c/    0           0     0     644     236       `
#include "main.h"
/**
 * _islower - check if char is lowercase
 *@c: the character to be tested
 * Return: 1 if lowercase, otherwise 0.
 */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
3-puts.c/       0           0     0     644     235       `
#include "main.h"
/**
  *_puts - prints a string followed by a new line
  *@str: string parameter
  *
  *Return: void
  */
void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     365       `
#include "main.h"
/**
 * *_strcmp  - compare two strings
 *@s1: string parameter
 *@s2: string parameter
 *
 *Return: int result
 */
int _strcmp(char *s1, char *s2)
{
	int i;
	int output;

	for (i = 0; s1[i] != '\0' && s2[i] != '\0'; i++)
	{
		if (s1[i] != s2[i])
		{
			output = s1[i] - s2[i];
			return (output);
		}
		else
		{
			continue;
		}
	}
	return (0);
}

3-strspn.c/     0           0     0     644     455       `
#include "main.h"
/**
 * *_strspn - gets length of a prefix substring
 *@s: string 1
 *@accept: string 2
 *
 *Return: pointer to first occurrence of c
 */
unsigned int _strspn(char *s, char *accept)
{
	int i, j;
	unsigned int l = 0;

	for (i = 0; accept[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				l++;
				break;
			}
			else if (accept[j + 1] == '\0')
			{
				return (l);
			}
		}
	}
	return (0);
}

4-isalpha.c/    0           0     0     644     260       `
#include "main.h"
/**
 * _isalpha - check if char is alphabet
 *@c: the character to be tested
 * Return: 1 if alphabet, otherwise 0.
 */
int _isalpha(int c)
{
	if ((c >= 97 && c <= 122) || (c >= 65 && c <= 90))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
4-strpbrk.c/    0           0     0     644     338       `
#include "main.h"
/**
 * *_strpbrk - searches a string for a set of bytes
 *@s: string 1
 *@accept: string 2
 *
 *Return: pointer to byte in s
 */
char *_strpbrk(char *s, char *accept)
{
	int i, j;

	for (i = 0; s[i]; i++)
	{
		for (j = 0; accept[j]; j++)
		{
			if (s[i] == accept[j])
			{
				return (&s[i]);
			}
		}
	}
	return (0);
}
5-strstr.c/     0           0     0     644     404       `
#include "main.h"
/**
 * *_strstr - locates a substring
 *@haystack: string 1
 *@needle: string 2
 *
 *Return: pointer to located substring
 */
char *_strstr(char *haystack, char *needle)
{
	int i, j;

	for (i = 0; haystack[i]; i++)
	{
		for (j = 0; needle[j]; j++)
		{
			if (haystack[i + j] != needle[j])
			{
				break;
			}

		}

		if (!needle[j])
		{
			return (&haystack[i]);
		}
	}
	return (0);
}
6-abs.c/        0           0     0     644     175       `
#include "main.h"
/**
 * _abs - prints absolute value of int
 *@x: int input
 * Return: int
 */
int _abs(int x)
{
	if (x < 0)
	{
		return (-x);
	}
	else
	{
		return (x);
	}
}

9-strcpy.c/     0           0     0     644     310       `
#include "main.h"
/**
  * *_strcpy - copies string of pointer to a destination
  * @dest: destination
  * @src: source string
  *
  * Return: the pointer to dest
  */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';
	return (dest);
}
_putchar.c/     0           0     0     644     264       `
#include "main.h"
#include <unistd.h>
/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
